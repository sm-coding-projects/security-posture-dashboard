// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DATABASE_URL_POOLED")
}

enum UserTier {
  FREE
  PREMIUM
  ENTERPRISE
}

enum ScanStatus {
  PENDING
  RUNNING
  COMPLETED
  FAILED
  CANCELLED
}

enum ScanType {
  BASIC
  ADVANCED
  PREMIUM
}

enum AlertType {
  SECURITY_ISSUE
  SCAN_COMPLETE
  CREDIT_LOW
  PLAN_UPGRADE
  SYSTEM_NOTIFICATION
}

enum TransactionType {
  ADD
  DEDUCT
  REFUND
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  image         String?
  tier          UserTier  @default(FREE)
  credits       Int       @default(100)
  totalScans    Int       @default(0)
  githubId      String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  accounts          Account[]
  sessions          Session[]
  scans             Scan[]
  apiKeys           ApiKey[]
  alerts            Alert[]
  creditTransactions CreditTransaction[]

  @@index([email])
  @@index([githubId])
  @@index([tier])
  @@index([createdAt(sort: Desc)])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([sessionToken])
}

model Scan {
  id            String     @id @default(cuid())
  userId        String
  domain        String
  status        ScanStatus @default(PENDING)
  sslGrade      String?
  securityScore Int?
  sslDetails    Json?
  headerDetails Json?
  dnsDetails    Json?
  vulnerabilities Json?
  creditsUsed   Int        @default(1)
  scanType      ScanType   @default(BASIC)
  errorMessage  String?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([domain])
  @@index([status])
  @@index([scanType])
  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model ApiKey {
  id        String    @id @default(cuid())
  userId    String
  key       String    @unique
  name      String
  lastUsed  DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([key])
  @@index([lastUsed])
}

model Alert {
  id        String    @id @default(cuid())
  userId    String
  type      AlertType
  message   String
  read      Boolean   @default(false)
  data      Json?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([userId, read])
  @@index([type])
  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}

model CreditTransaction {
  id          String          @id @default(cuid())
  userId      String
  amount      Int
  type        TransactionType
  description String
  balance     Int
  createdAt   DateTime        @default(now())

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@index([type])
  @@index([createdAt(sort: Desc)])
  @@index([userId, createdAt(sort: Desc)])
}